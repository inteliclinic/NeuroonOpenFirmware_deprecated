//---------------------------------------------------------------------------------------------------
#ifndef INC_IC_LOG_H_
#define INC_IC_LOG_H_
//---------------------------------------------------------------------------------------------------
#include <stdint.h>
#include "ic_movement.h"
#include <global_conf.h>
//---------------------------------------------------------------------------------------------------
#define	LOG_CHANNELS_NUMBER		5	///Should not be zero! It is ON/OFF array size.
//---------------------------------------------------------------------------------------------------
//	#define LOG_USE_IRLED			--- use this via global_conf.h
//	#define LOG_USE_REDLED			--- use this via global_conf.h
//
//	#define LOG_USE_NN				--- use this via global_conf.h
//
//	#define LOG_USE_BUSTIMER		--- use this via global_conf.h
//	#define LOG_USE_EEG_FIFO_COUNT	--- use this via global_conf.h
//---------------------------------------------------------------------------------------------------
#define	LOG_IRLED							0x00
#define	LOG_REDLED							0x01
#define	LOG_NN								0x02

#define	LOG_BUSTIMER						0x03
#define	LOG_EEG_FIFO_COUNT					0x04
//---------------------------------------------------------------------------------------------------






//---------------------------------------------------------------------------------------------------
#define LOG_FRAME_ID_RAW_SIGNAL				0x01
#define LOG_FRAME_ID_RAW_ACC				0x02
#define LOG_FRAME_ID_RAW_IRLED				0x03
#define LOG_FRAME_ID_RAW_REDLED				0x04
#define LOG_FRAME_ID_RAW_NN					0x0F

#define LOG_FRAME_ID_RESERVED1				0x10	//For UART-testuling entry point

#define LOG_FRAME_ID_BAND_PART				0x11
#define LOG_FRAME_ID_EPOCH					0x12
#define LOG_FRAME_ID_CONNECTED_EPOCHS		0x13

#define LOG_FRAME_ID_BUSTIMER				0x20
#define LOG_FRAME_ID_EEG_FIFO_COUNT			0x21

#define LOG_FRAME_ID_RAW_PAGE				0xD0

#define LOG_FRAME_ID_STRING					0xE0

#define LOG_FRAME_ID_REPORT_SECOND			0xA0
//---------------------------------------------------------------------------------------------------
/* LOG SIGNAL FRAME */
//---------------------------------------------------------------------------------------------------
#define LOG_FRAME_TEMPLATE_FUN_PREFIX		logfi16
#define LOG_FRAME_TEMPLATE_TYPE				int16_t
#define LOG_FRAME_TEMPLATE_SIZE				25
#define LOG_FRAME_TEMPLATE_STR_NAME			LOGFi16
#include <ic_log_template.h>
//---------------------------------------------------------------------------------------------------
#define LOG_FRAME_TEMPLATE_FUN_PREFIX		logfu16
#define LOG_FRAME_TEMPLATE_TYPE				uint16_t
#define LOG_FRAME_TEMPLATE_SIZE				25
#define LOG_FRAME_TEMPLATE_STR_NAME			LOGFu16
#include <ic_log_template.h>
//---------------------------------------------------------------------------------------------------
#define LOG_FRAME_TEMPLATE_FUN_PREFIX		logfi32
#define LOG_FRAME_TEMPLATE_TYPE				int32_t
#define LOG_FRAME_TEMPLATE_SIZE				5
#define LOG_FRAME_TEMPLATE_STR_NAME			LOGFi32
#include <ic_log_template.h>
//---------------------------------------------------------------------------------------------------
#define LOG_FRAME_TEMPLATE_FUN_PREFIX		logfacc
#define LOG_FRAME_TEMPLATE_TYPE				acc_data
#define LOG_FRAME_TEMPLATE_SIZE				5
#define LOG_FRAME_TEMPLATE_STR_NAME			LOGF_ACC
#include <ic_log_template.h>
//---------------------------------------------------------------------------------------------------
/* LOG UNIVERSAL FRAME */
//---------------------------------------------------------------------------------------------------
typedef struct __attribute__((packed)) {
	uint32_t	a;
	uint8_t		b;
} LogTestStr;

//---------------------------------------------------------------------------------------------------
typedef struct {
	uint8_t		id;
	uint8_t 	fc;
	void		*payload;
	uint32_t 	psize;
} LOGFuni;
//---------------------------------------------------------------------------------------------------
static inline void logf_clear(LOGFuni *lf) {
	lf->fc = 0;
}
//---------------------------------------------------------------------------------------------------
bool logf_send(LOGFuni *lf);
//---------------------------------------------------------------------------------------------------
bool logf_sendex(LOGFuni *lf, void *payload);
//---------------------------------------------------------------------------------------------------
/* LOG STRING FRAME */
//---------------------------------------------------------------------------------------------------
bool logf_sendStr(const char* txt);
//---------------------------------------------------------------------------------------------------
void logf_clearStrFC();
//---------------------------------------------------------------------------------------------------
/* LOG RAW PAGE FRAME */
//---------------------------------------------------------------------------------------------------
typedef struct __attribute__((packed)) {
	uint8_t		data[256];
	uint16_t	pid;
} LogRawPageStr;
//---------------------------------------------------------------------------------------------------
bool logf_sendRawPage(LogRawPageStr *frame);
//---------------------------------------------------------------------------------------------------
void logf_clearRawPageFC();
//---------------------------------------------------------------------------------------------------
/* LOG CYCLE FEAME */
//---------------------------------------------------------------------------------------------------
void log_initSecondReport(uint32_t sec);
//---------------------------------------------------------------------------------------------------
bool log_secondReport();
//---------------------------------------------------------------------------------------------------





//---------------------------------------------------------------------------------------------------
void log_enable(int code);
//---------------------------------------------------------------------------------------------------
void log_disable(int code);
//---------------------------------------------------------------------------------------------------
bool log_isActive(int code);
//---------------------------------------------------------------------------------------------------





//---------------------------------------------------------------------------------------------------
void log_irled_clear();
//---------------------------------------------------------------------------------------------------
bool log_irled(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_irled_byfifo(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_irled_flushFifo();
//---------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------
void log_redled_clear();
//---------------------------------------------------------------------------------------------------
bool log_redled(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_redled_byfifo(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_redled_flushFifo();
//---------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------
void log_nn_clear();
//---------------------------------------------------------------------------------------------------
bool log_nn(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_nn_byfifo(int32_t sample);
//---------------------------------------------------------------------------------------------------
bool log_nn_flushFifo();
//---------------------------------------------------------------------------------------------------


//---------------------------------------------------------------------------------------------------
void log_bustimer_clear();
//---------------------------------------------------------------------------------------------------
bool log_bustimer(uint16_t sample);
//---------------------------------------------------------------------------------------------------
bool log_bustimer_byfifo(uint16_t sample);
//---------------------------------------------------------------------------------------------------
bool log_bustimer_flushFifo();
//---------------------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------------------
void log_eegFIFOcount_clear();
//---------------------------------------------------------------------------------------------------
bool log_eegFIFOcount(uint16_t sample);
//---------------------------------------------------------------------------------------------------
bool log_eegFIFOcount_byfifo(uint16_t sample);
//---------------------------------------------------------------------------------------------------
bool log_eegFIFOcount_flushFifo();
//---------------------------------------------------------------------------------------------------


#endif /* INC_IC_LOG_H_ */
//---------------------------------------------------------------------------------------------------
