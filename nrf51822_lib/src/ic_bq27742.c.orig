
/**
 * @file
 * @brief BQ27742 driver methods
 */

#include "ic_bq27742.h"
#include "ic_ltc3220.h"
#include "ic_delay.h"
#include "ic_i2c.h"
#include <math.h>

const float BQ27742_CC_GAIN=0.0868;
const float BQ27742_CC_DELTA=103584;

void bq27742_program_flash_subclass_data_104()
{
	//!!! zamiana float na bajty BQ27742_CC_GAIN!!!
	volatile int16_t exp=0;
	volatile float val= BQ27742_CC_GAIN;
	volatile float mod_val=0;
	if(val<0.0)
		mod_val=val*(-1);
	else
		mod_val=val;

	volatile float tmp_val=mod_val;
	tmp_val=tmp_val*(1 + pow(2,-25));
	if(tmp_val <0.5)
	{
		while(tmp_val<0.5)
		{
			tmp_val=tmp_val*2;
			exp--;
		}
	}
	else
	{
		if(tmp_val>=1.0)
		{
			while(tmp_val>=1.0)
			{
				tmp_val=tmp_val/2;
				exp++;
			}
		}
	}
	if(exp>127)
		exp=127;
	else if(exp<-128)
		exp=-128;

	tmp_val=(pow(2.0,(8-exp))*mod_val)-128.0;
	volatile uint8_t byte2=(uint8_t)tmp_val;
	tmp_val=pow(2,8)*(tmp_val-byte2);
	volatile uint8_t byte1=(uint8_t)tmp_val;
	tmp_val=pow(2,8)*(tmp_val-byte1);
	volatile uint8_t byte0=(uint8_t)tmp_val;
	if(val<0)
		byte2=byte2 | 0x80;
	volatile uint8_t exp1=exp;

	//!!! zamiana float na int!!!
	exp=0;
	val= BQ27742_CC_DELTA;
	if(val<0.0)
		mod_val=val*(-1);
	else
		mod_val=val;
	tmp_val=mod_val;
	tmp_val=tmp_val*(1 + pow(2,-25));
	if(tmp_val<0.5)
	{
		while(tmp_val<0.5)
		{
			tmp_val=tmp_val*2;
			exp--;
		}
	}
	else if(tmp_val>=1.0)
	{
		while(tmp_val>=1.0)
		{
			tmp_val=tmp_val/2;
			exp++;
		}
	}
	if(exp>127)
		exp=127;
	else if(exp<-128)
		exp=-128;

	tmp_val=pow(2.0,(8-exp))*mod_val-128.0;
	volatile uint8_t byte22=(uint8_t)tmp_val;
	tmp_val=pow(2,8)*(tmp_val-byte22);
	volatile uint8_t byte11=(uint8_t)tmp_val;
	tmp_val=pow(2,8)*(tmp_val-byte11);
	volatile uint8_t byte00=(uint8_t)tmp_val;
	if(val<0)
		byte22=byte22 | 0x80;

	const uint8_t write_value_size=14;
	uint8_t subclass_id=104;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (exp1+128);
			write_value [1] = (uint8_t) (byte2);
			write_value [2] = (uint8_t) (byte1);
			write_value [3] = (uint8_t) (byte0);
			write_value [4] = (uint8_t) (exp+128);
			write_value [5] = (uint8_t) (byte22);
			write_value [6] = (uint8_t) (byte11);
			write_value [7] = (uint8_t) (byte00);
			write_value [8] = (uint8_t) (BQ27742_CC_OFFSET_>>8);
			write_value [9] = (uint8_t) (BQ27742_CC_OFFSET_);
			write_value [10] = (uint8_t) (BQ27742_BOARD_OFFSET_);
			write_value [11] = (uint8_t) (BQ27742_INT_TEMP_OFFSET);
			write_value [12] = (uint8_t) (BQ27742_EXT_TEMP_OFFSET);
			write_value [13] = (uint8_t) (BQ27742_PACK_V_OFFSET);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

<<<<<<< HEAD
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];
||||||| parent of 748011d... Debug info
uint32_t float_to_bq_format (float val)
{
  const float _2pow_25 = 2.98023224e-8;
  union {
    uint32_t raw;
    uint8_t  byte[4];
  } ret_val;

  int16_t exp=0;
  float mod_val;
  float tmp_val;

  mod_val=fabsf(val);

  tmp_val=mod_val*(1.0 + _2pow_25);

  if(tmp_val <0.5)
  {
    do
    {
      tmp_val*=2;
      exp--;
    } while(tmp_val<0.5);
  }
  else if(tmp_val>=1.0)
  {
    do
    {
      tmp_val/=2;
      exp++;
    } while(tmp_val>=1.0);
  }

  if(exp>127)
    exp=127;
  else if(exp<-128)
    exp=-128;

  tmp_val=(fast_power(2.0,(8-exp))*mod_val)-128.0;

  //Not sure about byte order here:
  ret_val.byte[0]=exp+128;
  ret_val.byte[1]=(uint8_t)tmp_val;
  tmp_val=256*(tmp_val-ret_val.byte[2]);
  ret_val.byte[2]=(uint8_t)tmp_val;
  tmp_val=256*(tmp_val-ret_val.byte[1]);
  ret_val.byte[3]=(uint8_t)tmp_val;

  if(val<0)
    ret_val.byte[1] |= 0x80;

  return ret_val.raw;
}
=======
uint32_t float_to_bq_format (float val)
{
  const float _2pow_25 = 2.98023224e-8;
  union {
    uint32_t raw;
    uint8_t  byte[4];
  } ret_val;

  int16_t exp=0;
  float mod_val;
  float tmp_val;

  mod_val=fabsf(val);

  tmp_val=mod_val*(1.0 + _2pow_25);

  if(tmp_val <0.5)
  {
    do
    {
      tmp_val*=2;
      exp--;
    } while(tmp_val<0.5);
  }
  else if(tmp_val>=1.0)
  {
    do
    {
      tmp_val/=2;
      exp++;
    } while(tmp_val>=1.0);
  }

  if(exp>127)
    exp=127;
  else if(exp<-128)
    exp=-128;

  tmp_val=(fast_power(2.0,(8-exp))*mod_val)-128.0;

  //Not sure about byte order here:
  ret_val.byte[3]=exp+128;
  ret_val.byte[2]=(uint8_t)tmp_val;
  tmp_val=256*(tmp_val-ret_val.byte[2]);
  ret_val.byte[1]=(uint8_t)tmp_val;
  tmp_val=256*(tmp_val-ret_val.byte[1]);
  ret_val.byte[0]=(uint8_t)tmp_val;

  if(val<0)
    ret_val.byte[2] |= 0x80;

  return ret_val.raw;
}
>>>>>>> 748011d... Debug info

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}


/*************************WRTIE/READ FUNCTION*************************************/
/**
 * @fn bq27742_read_control_data (uint16_t subcommand)
 * @brief read data from  control register
 *  param[in] subcommand: data subcommand code
 *  param[out] read control data
 */
uint16_t bq27742_read_control_data (uint16_t subcommand)
{
	uint8_t scommand [2] = {0};
	uint8_t read_value [2] = {0};
	uint16_t return_value =0;
	scommand [0] = (uint8_t) (subcommand);
	scommand [1] = (uint8_t) (subcommand>>8) ;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, scommand, 2);
	ic_delay_ms(1);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, read_value, 2);

	return_value = ((uint16_t) (read_value [1])<<8) + (uint16_t)(read_value [0]);

	return return_value;
}

/**
 * @fn bq27742_write_control_data (uint8_t subcommand, uint8_t *data)
 * @brief write data to control register
 *  param[in] subcommand: data subcommand code
 */
void bq27742_write_control_data (uint16_t subcommand)
{
	uint8_t scommand [2] = {0};
	scommand [0] = (uint8_t) (subcommand);
	scommand [1] = (uint8_t) (subcommand>>8) ;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, scommand, 2);
}

/**
 * @fn bq27742_read_reg_data  (uint8_t command)
 * @brief read data from  general register
 *  param[in] command: data command code
 *  param[out] read register data
 */
uint16_t bq27742_read_reg_data (uint8_t command)
{
	uint8_t read_value [2] = {0};
	uint16_t return_value =0;

	TWI_ReadReg (TWI_BQ27742_ADDRESS, command, read_value, 2);
	return_value = ((uint16_t) (read_value [1])<<8) + (uint16_t)(read_value [0]);

	return return_value;
}

/**
 * @fn bq27742_write_reg_data  (uint8_t command, uint16_t value)
 * @brief read data from  general register
 *  param[in] command: data command code
 *  param[in] value to write
 */
void bq27742_write_reg_data (uint8_t command, uint16_t value)
{
	uint8_t write_value [2] = {0};
	write_value [0] = (uint8_t) (value);
	write_value [1] = (uint8_t) (value>>8);

	TWI_WriteReg (TWI_BQ27742_ADDRESS, command, write_value, 2);
}

/**
 * @fn bq27742_data_flash_write(uint8_t subclass_id, uint8_t flash_block, uint8_t offset, uint16_t value)
 * @brief write data to the data flash
 *  param[in] subclass_id: id number of configuration class
 *  param[in] flash_block: number of page in flash block (block more than 32B)
 *  param[in] offset: index into the BlockDate() command space
 *  param[in] value: data to write
 *  param[in] reg size: size of register (1 - 1B; 2 - 2B) depends on the size of value to write
 */
void bq27742_data_flash_write(uint8_t subclass_id, uint8_t flash_block, uint8_t offset, uint16_t value, uint8_t reg_size)
{
<<<<<<< HEAD
	uint8_t write_value_2B [2] = {0};
	uint8_t write_value_1B = 0;
	if (reg_size == 2){
		write_value_2B [0] = (uint8_t) (value>>8);
		write_value_2B [1] = (uint8_t) (value);
	}
	else {
		write_value_1B = (uint8_t) (value);
	}

||||||| parent of 748011d... Debug info
=======
        if (reg_size == 2)
          value = ENSURE_ENDIANNESS(value);

>>>>>>> 748011d... Debug info
	uint8_t i = 0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;

	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);

	if (reg_size == 2)
		TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value_2B, 2);
	else
		TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, &write_value_1B, 1);

	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	for (i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];


	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
}


/**
 * @fn bq27742_data_flash_read(uint8_t subclass_id, uint8_t flash_block, uint8_t offset)
 * @brief read data from the data flash
 *  param[in] subclass_id: id number of configuration class
 *  param[in] flash_block: number of page in flash block (block more than 32B) (wartośc bezpośrednio z bqStudio)
 *  flash_block to offset z reference manuala modulo 32
 *  param[in] offset: index into the BlockDate() command space
 *			offset to przesunięcie w danym 32 bajtowym bolku jaki dostaniemy
 *  param[out] value of read data
 *
 *  	przyklad rejestr "Term V Delta" ma nastepujące dane:
 *			id=80, flash_block=2 (66mod32) flash_block=2 reg_size=2 (bo to int 16)
 */
uint16_t bq27742_data_flash_read(uint8_t subclass_id, uint8_t flash_block, uint8_t offset, uint8_t reg_size)
{
	uint8_t read_value_2B [2] = {0};
	uint8_t read_value_1B = 0;
	uint16_t reg_value = 0;

	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);

	if (reg_size == 2){
		TWI_ReadReg (TWI_BQ27742_ADDRESS, block_date_address, read_value_2B, 2);
		reg_value = ((uint16_t) (read_value_2B [0])<<8) + (uint16_t)(read_value_2B [1]);
	}
	else {
		TWI_ReadReg (TWI_BQ27742_ADDRESS, block_date_address, &read_value_1B, 1);
		reg_value = (uint16_t) (read_value_1B);
	}

	ic_delay_ms(BQ27742_REGISTER_READ_DELAY);
	return reg_value;
}

/**
 * @fn bq27742_control_status_read ()
 * @brief read data from control status register
 *  param[out] register value
 */
uint16_t bq27742_control_status_read ()
{
	uint16_t check_value = 0;

	check_value = bq27742_read_control_data (BQ27742_CONTROL_STATUS);

	return check_value;
}

/**
 * @fn bq27742_flags_read ()
 * @brief read data from flags register
 *  param[out] register value
 */
uint16_t bq27742_flags_read ()
{
	uint16_t flag_value =0;

	flag_value = bq27742_read_reg_data(BQ27742_FLAGS);

	return flag_value;
}

/**
 * @fn bq27742_safety_status_read ()
 * @brief read data from safety status register
 *  param[out] register value
 */
uint8_t bq27742_safety_status_read ()
{
	uint8_t safety_value =0;

	safety_value = (uint8_t) (bq27742_read_reg_data(BQ27742_SAFETY_STATUS));

	return safety_value;
}

/**
 * @fn bq27742_protector_status_read ()
 * @brief read data from protector status register
 *  param[out] register value
 */
uint8_t bq27742_protector_status_read ()
{
	uint8_t safety_value =0;

	safety_value = (uint8_t)(bq27742_read_reg_data(BQ27742_PROTECT_STATUS));

	return safety_value;
}

/*************************CONFIGURATION FUNCTIONS*************************************/

/**
 * @fn bq27742_check_communication ()
 * @brief check communication with device by read device type register (0x0742)
 *  param[out] return true if establish communication
 */
bool bq27742_check_communication ()
{
	uint16_t check_value =0;

	check_value = bq27742_read_control_data (BQ27742_DEVICE_TYPE);

	if (check_value == BQ27742_DEVICE_TYPE_VALUE)
		return true;
	else
		return false;
}

/**
 * @fn bq27742_sealed_set ()
 * @brief put device into sealed state
 *  param[out] return true if device enter sealed state
 */
bool bq27742_sealed_set ()
{
	uint16_t check_value = 0;
	uint16_t sealed_value = 1<<BQ_FULL_SEALED_MODE | 1<<BQ_SEALED_MODE;

	bq27742_write_control_data(BQ27742_SEALED);
	ic_delay_ms(1);

	check_value = bq27742_control_status_read();

	if (check_value && sealed_value)
		return true;
	else
		return false;
}

/**
 * @fn  bq27742_unsaled_set ()
 * @brief put device into unsealed state
 *  param[out] return true if device enter unsealed state
 */
bool bq27742_unsaled_set ()
{
	uint16_t check_value = 0;
	uint16_t sealed_value = 1<<BQ_FULL_SEALED_MODE;
	uint8_t key1 [2] = {0x14,0x04};
	uint8_t key2 [2] = {0x72,0x36};
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, key1, 2);
	ic_delay_ms(1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, key2, 2);
	ic_delay_ms(1);

	check_value = bq27742_control_status_read();
	if (check_value & sealed_value)
		return false;
	else
		return true;
}

/**
 * @fn  bq27742_full_access_set ()
 * @brief put device into full access state
 *  param[out] return true if device enter full access state
*/
bool bq27742_full_access_set ()
{
	uint16_t check_value = 0;
	uint16_t sealed_value = 1<<BQ_SEALED_MODE;
	uint8_t key1 [2] = {0xFF,0xFF};
	uint8_t key2 [2] = {0xFF,0xFF};
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, key1, 2);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_CONTROL, key2, 2);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	check_value = bq27742_control_status_read();
	if (check_value & sealed_value)
		return false;
	else
		return true;
}

/*************************APPLICATION FUNCTIONS*************************************/
/**
 * @fn  bq27742_init ()
 * @brief initialization device by set full access state
 *  param[out] return true if device init
*/
bool bq27742_init ()
{
	bool error_check = false;

	error_check = bq27742_check_communication ();

	return error_check;
}

/**
 * @fn bq27742_reset ()
 * @brief full reset device
 */
void bq27742_reset ()
{
	bq27742_write_control_data(BQ27742_RESET);
}

/**
 * @fn bq27742_shutdown ()
 * @brief shut down the device
 */
void bq27742_shutdown ()
{
	bq27742_write_control_data(BQ27742_SET_SHUTDOWN);
}

/**
 * @fn  bq27742_read_measurement_data (uint8_t *data)
 * @brief read measurement data form device
 *  param[in] data: pointer to the variable when data are read
*/
void bq27742_read_measurement_data (uint8_t *data)
{
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_TEMPERATURE, &data[0], 2);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_VOLTAGE, &data[2], 2);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_AVERAGE_CURRENT, &data[4], 2);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_STATE_OF_CHARGE, &data[6], 2);
}

int16_t bq27742_read_measurement_current_data ()
{
	uint8_t data[2];
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_AVERAGE_CURRENT, &data[0], 2);
	return (int16_t)((data[1]<<8)+data[0]);
}

uint16_t bq27742_soc_read ()
{
	return bq27742_read_reg_data (BQ27742_STATE_OF_CHARGE);
}

uint16_t bq27742_voltage_read ()
{
	return bq27742_read_reg_data (BQ27742_VOLTAGE);
}

bool bq27742_battery_full_charged ()
{
	uint16_t flag_value = 0;

	flag_value = bq27742_flags_read ();
	if(flag_value & (1<<FC))
		return true;
	else
		return false;
}

bool bq27742_battery_soc1_threshold ()
{
	uint16_t flag_value = 0;

	flag_value = bq27742_flags_read ();
	if(flag_value & (1<<SOC1))
		return true;
	else
		return false;
}

bool bq27742_battery_socf_threshold ()
{
	uint16_t flag_value = 0;

	flag_value = bq27742_flags_read ();
	if(flag_value & (1<<SOCF))
		return true;
	else
		return false;
}

bool bq27742_battery_high_detected ()
{
	uint16_t flag_value = 0;

	flag_value = bq27742_flags_read ();
	if(flag_value & (1<<BATHI))
		return true;
	else
		return false;
}

bool bq27742_battery_low_detected ()
{
	uint16_t flag_value = 0;

	flag_value = bq27742_flags_read ();
	if(flag_value & (1<<BATLOW))
		return true;
	else
		return false;
}

bool bq27742_charging_error_detected ()
{
	uint16_t safety_status = 0;
	uint8_t charging_error_mask = 1 << OVP_S | 1 << OTC_S | 1 << TDD_S | 1 << ISD_S;
	safety_status = bq27742_safety_status_read();
	if(safety_status & charging_error_mask)
		return true;
	else
		return false;
}

bool bq27742_discharging_error_detected ()
{
	uint16_t safety_status = 0;
	uint8_t charging_error_mask = 1 << UVP_S | 1 << OTD_S | 1 << TDD_S | 1 << ISD_S;
	safety_status = bq27742_safety_status_read();
	if(safety_status & charging_error_mask)
		return true;
	else
		return false;
}

/** CHG_FET off */
bool bq27742_charge_disable()
{
	uint16_t reg_value = 0;
	uint16_t command = 0x40 | BQ27742_CHG_DIS;

	bq27742_write_reg_data(BQ27742_FET_TEST, command);
	bq27742_write_control_data(BQ27742_START_FET_TEST);

	reg_value = bq27742_read_reg_data (BQ27742_FET_TEST);
	if (reg_value & BQ27742_CHG_DIS)
		return true;
	else
		return false;
}

/** DSG_FET off */
bool bq27742_discharge_disable()
{
	uint16_t reg_value = 0;
	uint16_t command = 0x40 | BQ27742_DSG_DIS;

	bq27742_write_reg_data(BQ27742_FET_TEST, command);
	bq27742_write_control_data(BQ27742_START_FET_TEST);

	reg_value = bq27742_read_reg_data (BQ27742_FET_TEST);
	if (reg_value & BQ27742_DSG_DIS)
		return false;
	else
		return true;
}

/** CHG_FET and DSG_FET on */
bool bq27742_charge_discharge_enable()
{
	uint16_t reg_value = 0;
	uint16_t command = 0x44;

	bq27742_write_reg_data(BQ27742_FET_TEST, command);
	bq27742_write_control_data(BQ27742_START_FET_TEST);

	reg_value = bq27742_read_reg_data (BQ27742_FET_TEST);
	if (reg_value & (BQ27742_CHG_DIS | BQ27742_DSG_DIS))
		return false;
	else
		return true;
}
/** BATTERY STATE MEASUREMENT */

/// TODO przerobic na czytanie stanu z BQ
/**
 * @fn battery_measurement ()
 * @brief check battery state of charge
 * @return battery level
 */
uint8_t bq_battery_measurement ()
{
<<<<<<< HEAD
	volatile uint16_t rem_cap=bq27742_read_reg_data(BQ27742_REMAINING_CAPACITY);
	volatile uint16_t full_chrg_cap=bq27742_read_reg_data(BQ27742_FULL_CHARGE_CAPACITY);
	return (uint8_t)100*rem_cap/full_chrg_cap;
||||||| parent of 748011d... Debug info
	uint16_t rem_cap=bq27742_read_reg_data(BQ27742_REMAINING_CAPACITY);
	uint16_t full_chrg_cap=bq27742_read_reg_data(BQ27742_FULL_CHARGE_CAPACITY);
	return (uint8_t)100*rem_cap/full_chrg_cap;
=======
	uint16_t rem_cap=bq27742_read_reg_data(BQ27742_REMAINING_CAPACITY);
	uint16_t full_chrg_cap=bq27742_read_reg_data(BQ27742_FULL_CHARGE_CAPACITY);
        /*
	 *uint16_t nom_available_cap=bq27742_read_reg_data(BQ27742_NOM_AVAILABLE_CAPACITY);
	 *uint16_t full_available_cap=bq27742_read_reg_data(BQ27742_FULL_AVAILABLE_CAPACITY);
         *print_cli(
         *    "\n\rRemaining cap: %d\n\rFull charge cap: %d\n\r"\
         *    "Nominal available cap: %d\n\rFull available cap: %d\n\r",
         *    rem_cap, full_chrg_cap, nom_available_cap, full_available_cap);
         */
	return (uint8_t)(((float)rem_cap/full_chrg_cap)*100.0f);
}

uint8_t bq_battery_cap_params(uint16_t *params){

  params[0]=bq27742_read_reg_data(BQ27742_REMAINING_CAPACITY);
  params[1]=bq27742_read_reg_data(BQ27742_FULL_CHARGE_CAPACITY);
  params[2]=bq27742_read_reg_data(BQ27742_NOM_AVAILABLE_CAPACITY);
  params[3]=bq27742_read_reg_data(BQ27742_FULL_AVAILABLE_CAPACITY);
  return 0;
>>>>>>> 748011d... Debug info
}

/**
 * @fn bq_is_charging_allowed()
 * @brief check if charging is allowed by BQ
 * @return is charging allowed info
 */
bool bq_is_charging_allowed()
{
	uint16_t flags = bq27742_flags_read ();
	bool is_charging_allowed = (flags >> 3) & 1;
	return is_charging_allowed;
}

// procedury do programowania
void bq27742_program_flash_subclass_safety()
{
	const uint8_t write_value_size=BQ27742_SAFETY_CLASS_SIZE;
	uint8_t subclass_id=BQ27742_SAFETY_CLASS_ID;
	uint8_t flash_block=0;
	uint8_t offset=0;

	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_OV_PROT_THRESHOLD>>8);
			write_value [1] = (uint8_t) (BQ27742_OV_PROT_THRESHOLD);
			write_value [2] = (uint8_t) (BQ27742_OV_PROT_DELAY);
			write_value [3] = (uint8_t) (BQ27742_OV_PROT_RECOVERY>>8);
			write_value [4] = (uint8_t) (BQ27742_OV_PROT_RECOVERY);
			write_value [5] = (uint8_t) (BQ27742_UV_PROT_THRESHOLD>>8);
			write_value [6] = (uint8_t) (BQ27742_UV_PROT_THRESHOLD);
			write_value [7] = (uint8_t) (BQ27742_UV_PROT_DELAY);
			write_value [8] = (uint8_t) (BQ27742_UV_PROT_RECOVERY>>8);
			write_value [9] = (uint8_t) (BQ27742_UV_PROT_RECOVERY);
			write_value [10] = (uint8_t) (BQ27742_BODY_DIODE_THRESHOLD>>8);
			write_value [11] = (uint8_t) (BQ27742_BODY_DIODE_THRESHOLD);
			write_value [12] = (uint8_t) (BQ27742_OT_CHG>>8);
			write_value [13] = (uint8_t) (BQ27742_OT_CHG);
			write_value [14] = (uint8_t) (BQ27742_OT_CHG_TIME);
			write_value [15] = (uint8_t) (BQ27742_OT_CHG_RECOVERY>>8);
			write_value [16] = (uint8_t) (BQ27742_OT_CHG_RECOVERY);
			write_value [17] = (uint8_t) (BQ27742_OT_DSG>>8);
			write_value [18] = (uint8_t) (BQ27742_OT_DSG);
			write_value [19] = (uint8_t) (BQ27742_OT_DSG_TIME);
			write_value [20] = (uint8_t) (BQ27742_OT_DSG_RECOVERY>>8);
			write_value [21] = (uint8_t) (BQ27742_OT_DSG_RECOVERY);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_charge()
{
	const uint8_t write_value_size=BQ27742_CHARGE_CLASS_SIZE;
	uint8_t subclass_id=BQ27742_CHARGE_CLASS_ID;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_CHARGING_VOLTAGE_>>8);
			write_value [1] = (uint8_t) (BQ27742_CHARGING_VOLTAGE_);

	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_charge_termination()
{
	const uint8_t write_value_size=13;

	uint8_t subclass_id=36;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_TAPER_CURRENT>>8);
			write_value [1] = (uint8_t) (BQ27742_TAPER_CURRENT);
			write_value [2] = (uint8_t) (BQ27742_MIN_TAPER_CAPACITY>>8);
			write_value [3] = (uint8_t) (BQ27742_MIN_TAPER_CAPACITY);
			write_value [4] = (uint8_t) (BQ27742_TAPER_VOLTAGE>>8);
			write_value [5] = (uint8_t) (BQ27742_TAPER_VOLTAGE);
			write_value [6] = (uint8_t) (BQ27742_CURRENT_TAPER_WINDOW);
			write_value [7] = (uint8_t) (BQ27742_TCA_SET);
			write_value [8] = (uint8_t) (BQ27742_TCA_CLEAR_PROCENT);
			write_value [9] = (uint8_t) (BQ27742_FC_SET_PROCENT);
			write_value [10] = (uint8_t) (BQ27742_FC_CLEAR_PROCENT);
			write_value [11] = (uint8_t) (BQ27742_DODATEOC_DELTA_T>>8);
			write_value [12] = (uint8_t) (BQ27742_DODATEOC_DELTA_T);


	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_JEITA()
{
	const uint8_t write_value_size=18;
	uint8_t subclass_id=39;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_T1_TEMP);
			write_value [1] = (uint8_t) (BQ27742_T2_TEMP);
			write_value [2] = (uint8_t) (BQ27742_T3_TEMP);
			write_value [3] = (uint8_t) (BQ27742_T4_TEMP);
			write_value [4] = (uint8_t) (BQ27742_T5_TEMP);
			write_value [5] = (uint8_t) (BQ27742_TEMP_HYS);
			write_value [6] = (uint8_t) (BQ27742_T1_T2_CHG_VOLTAGE>>8);
			write_value [7] = (uint8_t) (BQ27742_T1_T2_CHG_VOLTAGE);
			write_value [8] = (uint8_t) (BQ27742_T2_T3_CHG_VOLTAGE>>8);
			write_value [9] = (uint8_t) (BQ27742_T2_T3_CHG_VOLTAGE);
			write_value [10] = (uint8_t) (BQ27742_T3_T4_CHG_VOLTAGE>>8);
			write_value [11] = (uint8_t) (BQ27742_T3_T4_CHG_VOLTAGE);
			write_value [12] = (uint8_t) (BQ27742_T4_T5_CHG_VOLTAGE>>8);
			write_value [13] = (uint8_t) (BQ27742_T4_T5_CHG_VOLTAGE);
			write_value [14] = (uint8_t) (BQ27742_T1_T2_CHG_CURRENT);
			write_value [15] = (uint8_t) (BQ27742_T2_T3_CHG_CURRENT);
			write_value [16] = (uint8_t) (BQ27742_T3_T4_CHG_CURRENT);
			write_value [17] = (uint8_t) (BQ27742_T4_T5_CHG_CURRENT);

	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_data()
{
	//trzeba tak zrobić, bo jest przerwa w bloku
	bq27742_data_flash_write(48,0,0,BQ27742_DESIGN_VOLTAGE ,2);
	WDT_RR();


	const uint8_t write_value_size=16;

	uint8_t subclass_id=48;
	uint8_t offset=8;
	uint8_t flash_block=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_CYCLE_COUNT_>>8);
			write_value [1] = (uint8_t) (BQ27742_CYCLE_COUNT_);
			write_value [2] = (uint8_t) (BQ27742_CC_THRESHOLD>>8);
			write_value [3] = (uint8_t) (BQ27742_CC_THRESHOLD);
			write_value [4] = (uint8_t) (BQ27742_DESIGN_CAPACITY_>>8);
			write_value [5] = (uint8_t) (BQ27742_DESIGN_CAPACITY_);
			write_value [6] = (uint8_t) (BQ27742_DESIGN_ENERGY>>8);
			write_value [7] = (uint8_t) (BQ27742_DESIGN_ENERGY);
			write_value [8] = (uint8_t) (BQ27742_SOH_LOAD_I>>8);
			write_value [9] = (uint8_t) (BQ27742_SOH_LOAD_I);
			write_value [11] = (uint8_t) (BQ27742_ISD_CURRENT>>8);
			write_value [12] = (uint8_t) (BQ27742_ISD_CURRENT);
			write_value [13] = (uint8_t) (BQ27742_ISD_I_FILTER);
			write_value [14] = (uint8_t) (BQ27742_MIN_ISD_TIME);
			write_value [15] = (uint8_t) (BQ27742_DESIGN_ENERGY_SCALE);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_discharge()
{
	const uint8_t write_value_size=18;
	uint8_t subclass_id=49;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_SOC1_SET_THRESHOLD>>8);
			write_value [1] = (uint8_t) (BQ27742_SOC1_SET_THRESHOLD);
			write_value [2] = (uint8_t) (BQ27742_SOC1_CLEAR_THRESHOLD>>8);
			write_value [3] = (uint8_t) (BQ27742_SOC1_CLEAR_THRESHOLD);
			write_value [4] = (uint8_t) (BQ27742_SOCF_SET_THRESHOLD>>8);
			write_value [5] = (uint8_t) (BQ27742_SOCF_SET_THRESHOLD);
			write_value [6] = (uint8_t) (BQ27742_SOCF_CLEAR_THRESHOLD>>8);
			write_value [7] = (uint8_t) (BQ27742_SOCF_CLEAR_THRESHOLD);
			write_value [8] = (uint8_t) (BQ27742_BL_SET_VOLT_THRESHOLD>>8);
			write_value [9] = (uint8_t) (BQ27742_BL_SET_VOLT_THRESHOLD);
			write_value [10] = (uint8_t) (BQ27742_BL_SET_VOLT_TIME);
			write_value [11] = (uint8_t) (BQ27742_BL_CLEAR_VOLT_THRESHOLD>>8);
			write_value [12] = (uint8_t) (BQ27742_BL_CLEAR_VOLT_THRESHOLD);
			write_value [13] = (uint8_t) (BQ27742_BH_SET_VOLT_THRESHOLD>>8);
			write_value [14] = (uint8_t) (BQ27742_BH_SET_VOLT_THRESHOLD);
			write_value [15] = (uint8_t) (BQ27742_BH_VOLT_TIME);
			write_value [16] = (uint8_t) (BQ27742_BH_CLEAR_VOLT_THRESHOLD>>8);
			write_value [17] = (uint8_t) (BQ27742_BH_CLEAR_VOLT_THRESHOLD);

	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_manufacturer_data()
{
	const uint8_t write_value_size=12;
	uint8_t subclass_id=56;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_PACK_LOT_CODE>>8);
			write_value [1] = (uint8_t) (BQ27742_PACK_LOT_CODE);
			write_value [2] = (uint8_t) (BQ27742_PCB_LOT_CODE>>8);
			write_value [3] = (uint8_t) (BQ27742_PCB_LOT_CODE);
			write_value [4] = (uint8_t) (BQ27742_FIRMWARE_VERSION>>8);
			write_value [5] = (uint8_t) (BQ27742_FIRMWARE_VERSION);
			write_value [6] = (uint8_t) (BQ27742_HARDWARE_REVISION>>8);
			write_value [7] = (uint8_t) (BQ27742_HARDWARE_REVISION);
			write_value [8] = (uint8_t) (BQ27742_CELL_REVISION>>8);
			write_value [9] = (uint8_t) (BQ27742_CELL_REVISION);
			write_value [10] = (uint8_t) (BQ27742_DF_CONFIG_VERSION>>8);
			write_value [11] = (uint8_t) (BQ27742_DF_CONFIG_VERSION);

	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_integrity_data()
{
	const uint8_t write_value_size=8;
	uint8_t subclass_id=57;
	uint8_t flash_block=0;
	uint8_t offset=6;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_ALL_DF_CHECKSUM>>8);
			write_value [1] = (uint8_t) (BQ27742_ALL_DF_CHECKSUM);
			write_value [2] = (uint8_t) (BQ27742_STATIC_CHEM_DF_CHECKSUM>>8);
			write_value [3] = (uint8_t) (BQ27742_STATIC_CHEM_DF_CHECKSUM);
			write_value [4] = (uint8_t) (BQ27742_STATIC_DF_CHECKSUM>>8);
			write_value [5] = (uint8_t) (BQ27742_STATIC_DF_CHECKSUM);
			write_value [6] = (uint8_t) (BQ27742_PROT_CHECKSUM>>8);
			write_value [7] = (uint8_t) (BQ27742_PROT_CHECKSUM);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_lifetime_data()
{
	const uint8_t write_value_size=12;
	uint8_t subclass_id=59;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_LIFETIME_MAX_TEMP>>8);
			write_value [1] = (uint8_t) (BQ27742_LIFETIME_MAX_TEMP);
			write_value [2] = (uint8_t) (BQ27742_LIFETIME_MIN_TEMP>>8);
			write_value [3] = (uint8_t) (BQ27742_LIFETIME_MIN_TEMP);
			write_value [4] = (uint8_t) (BQ27742_LIFETIME_MAX_PACK_VOLTAGE>>8);
			write_value [5] = (uint8_t) (BQ27742_LIFETIME_MAX_PACK_VOLTAGE);
			write_value [6] = (uint8_t) (BQ27742_LIFETIME_MIN_PACK_VOLTAGE>>8);
			write_value [7] = (uint8_t) (BQ27742_LIFETIME_MIN_PACK_VOLTAGE);
			write_value [8] = (uint8_t) (BQ27742_LIFETIME_MAX_CHG_CURRENT>>8);
			write_value [9] = (uint8_t) (BQ27742_LIFETIME_MAX_CHG_CURRENT);
			write_value [10] = (uint8_t) (BQ27742_LIFETIME_MAX_DSG_CURRENT>>8);
			write_value [11] = (uint8_t) (BQ27742_LIFETIME_MAX_DSG_CURRENT);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_lifetime_temp_samples()
{
	const uint8_t write_value_size=3;
	uint8_t subclass_id=60;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_LT_FLASH_CNT>>8);
			write_value [1] = (uint8_t) (BQ27742_LT_FLASH_CNT);
			write_value [2] = (uint8_t) (BQ27742_LT_AFE_STATUS);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_registers()
{
	const uint8_t write_value_size=7;
	uint8_t subclass_id=64;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_PACK_CONFIGURATION>>8);
			write_value [1] = (uint8_t) (BQ27742_PACK_CONFIGURATION);
			write_value [2] = (uint8_t) (BQ27742_PACK_CONFIGURATION_B);
			write_value [3] = (uint8_t) (BQ27742_PACK_CONFIGURATION_C);
			write_value [4] = (uint8_t) (BQ27742_PACK_CONFIGURATION_D);
			write_value [5] = (uint8_t) (BQ27742_PROT_OC_CONFIG);
			write_value [6] = (uint8_t) (BQ27742_PROT_OV_CONFIG);


	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_lifetime_resolution()
{
	const uint8_t write_value_size=5;
	uint8_t subclass_id=66;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_LT_TEMP_RES);
			write_value [1] = (uint8_t) (BQ27742_LT_V_RES);
			write_value [2] = (uint8_t) (BQ27742_LT_CUR_RES);
			write_value [3] = (uint8_t) (BQ27742_LT_UPDATE_TIME>>8);
			write_value [4] = (uint8_t) (BQ27742_LT_UPDATE_TIME);
			write_value [5] = (uint8_t) (BQ27742_FLASH_UPDATE_OK_VOLTAGE>>8);
			write_value [6] = (uint8_t) (BQ27742_FLASH_UPDATE_OK_VOLTAGE);


	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_power()
{
	const uint8_t write_value_size=4;
	uint8_t subclass_id=68;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_FLASH_UPDATE_OK_VOLTAGE>>8);
			write_value [1] = (uint8_t) (BQ27742_FLASH_UPDATE_OK_VOLTAGE);
			write_value [2] = (uint8_t) (BQ27742_SLEEP_CURRENT>>8);
			write_value [3] = (uint8_t) (BQ27742_SLEEP_CURRENT);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();

	bq27742_data_flash_write(68,0,10,BQ27742_SHUTDOWN_V ,2); //ok
	bq27742_data_flash_write(68,0,12,BQ27742_FS_WAIT ,1); //ok

}
void bq27742_program_flash_subclass_manufacturer_info1()
{
	const uint8_t write_value_size=32;
	uint8_t subclass_id=58;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_BLOCK_A_0);
			write_value [1] = (uint8_t) (BQ27742_BLOCK_A_1);
			write_value [2] = (uint8_t) (BQ27742_BLOCK_A_2);
			write_value [3] = (uint8_t) (BQ27742_BLOCK_A_3);
			write_value [4] = (uint8_t) (BQ27742_BLOCK_A_4);
			write_value [5] = (uint8_t) (BQ27742_BLOCK_A_5);
			write_value [6] = (uint8_t) (BQ27742_BLOCK_A_6);
			write_value [7] = (uint8_t) (BQ27742_BLOCK_A_7);
			write_value [8] = (uint8_t) (BQ27742_BLOCK_A_8);
			write_value [9] = (uint8_t) (BQ27742_BLOCK_A_9);
			write_value [10] = (uint8_t) (BQ27742_BLOCK_A_10);
			write_value [11] = (uint8_t) (BQ27742_BLOCK_A_11);
			write_value [12] = (uint8_t) (BQ27742_BLOCK_A_12);
			write_value [13] = (uint8_t) (BQ27742_BLOCK_A_13);
			write_value [14] = (uint8_t) (BQ27742_BLOCK_A_14);
			write_value [15] = (uint8_t) (BQ27742_BLOCK_A_15);
			write_value [16] = (uint8_t) (BQ27742_BLOCK_A_16);
			write_value [17] = (uint8_t) (BQ27742_BLOCK_A_17);
			write_value [18] = (uint8_t) (BQ27742_BLOCK_A_18);
			write_value [19] = (uint8_t) (BQ27742_BLOCK_A_19);
			write_value [20] = (uint8_t) (BQ27742_BLOCK_A_20);
			write_value [21] = (uint8_t) (BQ27742_BLOCK_A_21);
			write_value [22] = (uint8_t) (BQ27742_BLOCK_A_22);
			write_value [23] = (uint8_t) (BQ27742_BLOCK_A_23);
			write_value [24] = (uint8_t) (BQ27742_BLOCK_A_24);
			write_value [25] = (uint8_t) (BQ27742_BLOCK_A_25);
			write_value [26] = (uint8_t) (BQ27742_BLOCK_A_26);
			write_value [27] = (uint8_t) (BQ27742_BLOCK_A_27);
			write_value [28] = (uint8_t) (BQ27742_BLOCK_A_28);
			write_value [29] = (uint8_t) (BQ27742_BLOCK_A_29);
			write_value [30] = (uint8_t) (BQ27742_BLOCK_A_30);
			write_value [31] = (uint8_t) (BQ27742_BLOCK_A_31);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();

}
void bq27742_program_flash_subclass_manufacturer_info2()
{
	const uint8_t write_value_size=32;
	uint8_t subclass_id=58;
	uint8_t flash_block=1;
	uint8_t offset=0;

	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_BLOCK_B_0);
			write_value [1] = (uint8_t) (BQ27742_BLOCK_B_1);
			write_value [2] = (uint8_t) (BQ27742_BLOCK_B_2);
			write_value [3] = (uint8_t) (BQ27742_BLOCK_B_3);
			write_value [4] = (uint8_t) (BQ27742_BLOCK_B_4);
			write_value [5] = (uint8_t) (BQ27742_BLOCK_B_5);
			write_value [6] = (uint8_t) (BQ27742_BLOCK_B_6);
			write_value [7] = (uint8_t) (BQ27742_BLOCK_B_7);
			write_value [8] = (uint8_t) (BQ27742_BLOCK_B_8);
			write_value [9] = (uint8_t) (BQ27742_BLOCK_B_9);
			write_value [10] = (uint8_t) (BQ27742_BLOCK_B_10);
			write_value [11] = (uint8_t) (BQ27742_BLOCK_B_11);
			write_value [12] = (uint8_t) (BQ27742_BLOCK_B_12);
			write_value [13] = (uint8_t) (BQ27742_BLOCK_B_13);
			write_value [14] = (uint8_t) (BQ27742_BLOCK_B_14);
			write_value [15] = (uint8_t) (BQ27742_BLOCK_B_15);
			write_value [16] = (uint8_t) (BQ27742_BLOCK_B_16);
			write_value [17] = (uint8_t) (BQ27742_BLOCK_B_17);
			write_value [18] = (uint8_t) (BQ27742_BLOCK_B_18);
			write_value [19] = (uint8_t) (BQ27742_BLOCK_B_19);
			write_value [20] = (uint8_t) (BQ27742_BLOCK_B_20);
			write_value [21] = (uint8_t) (BQ27742_BLOCK_B_21);
			write_value [22] = (uint8_t) (BQ27742_BLOCK_B_22);
			write_value [23] = (uint8_t) (BQ27742_BLOCK_B_23);
			write_value [24] = (uint8_t) (BQ27742_BLOCK_B_24);
			write_value [25] = (uint8_t) (BQ27742_BLOCK_B_25);
			write_value [26] = (uint8_t) (BQ27742_BLOCK_B_26);
			write_value [27] = (uint8_t) (BQ27742_BLOCK_B_27);
			write_value [28] = (uint8_t) (BQ27742_BLOCK_B_28);
			write_value [29] = (uint8_t) (BQ27742_BLOCK_B_29);
			write_value [30] = (uint8_t) (BQ27742_BLOCK_B_30);
			write_value [31] = (uint8_t) (BQ27742_BLOCK_B_31);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_if_cfg1()
{
	bq27742_data_flash_write(80,0,0,BQ27742_LOAD_SELECT ,1);
	WDT_RR();
	bq27742_data_flash_write(80,0,1,BQ27742_LOAD_MODE ,1);
	WDT_RR();
	bq27742_data_flash_write(80,0,17,BQ27742_MAX_RES_FACTOR ,1);
	WDT_RR();
	bq27742_data_flash_write(80,0,18,BQ27742_MIN_RES_FACTOR ,1);
	WDT_RR();
	bq27742_data_flash_write(80,0,20,BQ27742_RA_FILTER ,2);
	WDT_RR();
	bq27742_data_flash_write(80,0,22, BQ27742_RES_V_DROP,2);
	WDT_RR();
	bq27742_data_flash_write(80,1,7, BQ27742_FAST_QMAX_START_DOD_PROCENT,1);
	WDT_RR();
	bq27742_data_flash_write(80,1,8,BQ27742_FAST_QMAX_END_DOD_PROCENT ,1);
	WDT_RR();
	bq27742_data_flash_write(80,1,9,BQ27742_FAST_QMAX_STAR_VOLT_DELTA ,2);
	WDT_RR();
	bq27742_data_flash_write(80,1,11,BQ27742_FAST_QMAX_CURRENT_THRESHOLD ,2);
	WDT_RR();
	bq27742_data_flash_write(80,1,29,BQ27742_QMAX_CAPACITY_ERR ,1);
	WDT_RR();
	bq27742_data_flash_write(80,1,30,BQ27742_MAX_QMAX_CHANGE ,1);
	WDT_RR();
	bq27742_data_flash_write(80,2,0, BQ27742_TERMINATE_VOLTAGE,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,2,BQ27742_TERM_V_DELTA ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,5,BQ27742_RESRELAX_TIME ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,9, BQ27742_USER_RATE_MA,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,11, BQ27742_USER_RATE_PWR,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,13,BQ27742_RESERVE_CAP_MAH ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,20,BQ27742_MAX_DELTAV ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,22,BQ27742_MIN_DELTAV ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,24,BQ27742_MAX_SIM_RATE ,1);
	WDT_RR();
	bq27742_data_flash_write(80,2,25, BQ27742_MIN_SIM_RATE,1);
	WDT_RR();
	bq27742_data_flash_write(80,2,26,BQ27742_RA_MAX_DELTA ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,28,BQ27742_TRACE_RESISTANCE ,2);
	WDT_RR();
	bq27742_data_flash_write(80,2,30,BQ27742_DOWNSTREAM_RESISTANCE ,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,0,BQ27742_QMAX_MAX_DELTA_PROCENT ,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,1,BQ27742_QMAX_BOUND_PROCENT ,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,2,BQ27742_DELTAV_MAX_DELTA ,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,4,BQ27742_MAX_RES_SCALE ,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,6,BQ27742_MIN_RES_SCALE ,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,8,BQ27742_FAST_SCALE_START_SOC ,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,9,BQ27742_FAST_SCALE_LOAD_SELECT ,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,10,BQ27742_CHARGE_HYS_V_SHIFT ,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,12,BQ27742_RASCL_OCV_RST_TEMP_THRESH ,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,13,BQ27742_MAX_ALLOWED_CURRENT,2);
	WDT_RR();
	bq27742_data_flash_write(80,3,15,BQ27742_MAX_CURRENT_PULSE_DURATION,1);
	WDT_RR();
	bq27742_data_flash_write(80,3,16,BQ27742_MAX_CURRENT_INTERRUPT_STEP,2);
	WDT_RR();

}


void bq27742_program_flash_subclass_if_cfg2()
{
	//////////////////////////////
	bq27742_data_flash_write(80,2,5,BQ27742_RESRELAX_TIME ,2);
	//////////////////
	WDT_RR();


	const uint8_t write_value_size7=6;
	uint8_t offset=9;
	uint8_t flash_block=2;
	uint8_t write_value [write_value_size7];
				write_value [0] = (uint8_t) (BQ27742_USER_RATE_MA>>8);
				write_value [1] = (uint8_t) (BQ27742_USER_RATE_MA);
				write_value [2] = (uint8_t) (BQ27742_USER_RATE_PWR>>8);
				write_value [3] = (uint8_t) (BQ27742_USER_RATE_PWR);
				write_value [4] = (uint8_t) (BQ27742_RESERVE_CAP_MAH>>8);
				write_value [5] = (uint8_t) (BQ27742_RESERVE_CAP_MAH);
	uint8_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;
	uint8_t subclass_id=80;
	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint8_t flash_date_access = 0x00;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size7);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];
	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
//////////////////
	WDT_RR();
	const uint8_t write_value_size8=12;
	offset=20;
	flash_block=2;
        write_value [0] = (uint8_t) (BQ27742_MAX_DELTAV>>8);
        write_value [1] = (uint8_t) (BQ27742_MAX_DELTAV);
        write_value [2] = (uint8_t) (BQ27742_MIN_DELTAV>>8);
        write_value [3] = (uint8_t) (BQ27742_MIN_DELTAV);
        write_value [4] = (uint8_t) (BQ27742_MAX_SIM_RATE);
        write_value [5] = (uint8_t) (BQ27742_MIN_SIM_RATE);
        write_value [6] = (uint8_t) (BQ27742_RA_MAX_DELTA>>8);
        write_value [7] = (uint8_t) (BQ27742_RA_MAX_DELTA);
        write_value [8] = (uint8_t) (BQ27742_TRACE_RESISTANCE>>8);
        write_value [9] = (uint8_t) (BQ27742_TRACE_RESISTANCE);
        write_value [10] = (uint8_t) (BQ27742_DOWNSTREAM_RESISTANCE>>8);
        write_value [11] = (uint8_t) (BQ27742_DOWNSTREAM_RESISTANCE);
	flash_date_sum = 0;
	checksum = 0;
	block_date_address = BQ27742_BLOCK_DATA + offset;
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size8);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];
	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
	//////////////////
	WDT_RR();
	const uint8_t write_value_size9=18;
	offset=0;
	flash_block=3;
        write_value [0] = (uint8_t) (BQ27742_QMAX_MAX_DELTA_PROCENT);
        write_value [1] = (uint8_t) (BQ27742_QMAX_BOUND_PROCENT);
        write_value [2] = (uint8_t) (BQ27742_DELTAV_MAX_DELTA>>8);
        write_value [3] = (uint8_t) (BQ27742_DELTAV_MAX_DELTA);
        write_value [4] = (uint8_t) (BQ27742_MAX_RES_SCALE>>8);
        write_value [5] = (uint8_t) (BQ27742_MAX_RES_SCALE);
        write_value [6] = (uint8_t) (BQ27742_MIN_RES_SCALE>>8);
        write_value [7] = (uint8_t) (BQ27742_MIN_RES_SCALE);
        write_value [8] = (uint8_t) (BQ27742_FAST_SCALE_START_SOC);
        write_value [9] = (uint8_t) (BQ27742_FAST_SCALE_LOAD_SELECT);
        write_value [10] = (uint8_t) (BQ27742_CHARGE_HYS_V_SHIFT>>8);
        write_value [11] = (uint8_t) (BQ27742_CHARGE_HYS_V_SHIFT);
        write_value [12] = (uint8_t) (BQ27742_RASCL_OCV_RST_TEMP_THRESH);
        write_value [13] = (uint8_t) (BQ27742_MAX_ALLOWED_CURRENT>>8);
        write_value [14] = (uint8_t) (BQ27742_MAX_ALLOWED_CURRENT);
        write_value [15] = (uint8_t) (BQ27742_MAX_CURRENT_PULSE_DURATION);
        write_value [16] = (uint8_t) (BQ27742_MAX_CURRENT_INTERRUPT_STEP>>8);
        write_value [17] = (uint8_t) (BQ27742_MAX_CURRENT_INTERRUPT_STEP);

	flash_date_sum = 0;
	checksum = 0;
	block_date_address = BQ27742_BLOCK_DATA + offset;
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size9);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];
	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
	return;
}

void bq27742_program_flash_subclass_current_thresholds()
{
	const uint8_t write_value_size=12;
	uint8_t subclass_id=81;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_DSG_CURRENT_THRESHOLD>>8);
			write_value [1] = (uint8_t) (BQ27742_DSG_CURRENT_THRESHOLD);
			write_value [2] = (uint8_t) (BQ27742_CHG_CURRENT_THRESHOLD>>8);
			write_value [3] = (uint8_t) (BQ27742_CHG_CURRENT_THRESHOLD);
			write_value [4] = (uint8_t) (BQ27742_QUIT_CURRENT>>8);
			write_value [5] = (uint8_t) (BQ27742_QUIT_CURRENT);
			write_value [6] = (uint8_t) (BQ27742_DSG_RELAX_TIME>>8);
			write_value [7] = (uint8_t) (BQ27742_DSG_RELAX_TIME);
			write_value [8] = (uint8_t) (BQ27742_CHG_RELAX_TIME);
			write_value [9] = (uint8_t) (BQ27742_QUIT_RELAX_TIME);
			write_value [10] = (uint8_t) (BQ27742_MAX_IR_CORRECT>>8);
			write_value [11] = (uint8_t) (BQ27742_MAX_IR_CORRECT);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_state()
{
	const uint8_t write_value_size=15;

	uint8_t subclass_id=82;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_QMAX_CELL_0>>8);
			write_value [1] = (uint8_t) (BQ27742_QMAX_CELL_0);
			write_value [2] = (uint8_t) (BQ27742_UPDATE_STATUS);
			write_value [3] = (uint8_t) (BQ27742_V_AT_CHG_TERM>>8);
			write_value [4] = (uint8_t) (BQ27742_V_AT_CHG_TERM);
			write_value [5] = (uint8_t) (BQ27742_AVG_I_LAST_RUN>>8);
			write_value [6] = (uint8_t) (BQ27742_AVG_I_LAST_RUN);
			write_value [7] = (uint8_t) (BQ27742_AVG_P_LAST_RUN>>8);
			write_value [8] = (uint8_t) (BQ27742_AVG_P_LAST_RUN);
			write_value [9] = (uint8_t) (BQ27742_DELTA_VOLTAGE>>8);
			write_value [10] = (uint8_t) (BQ27742_DELTA_VOLTAGE);
			write_value [11] = (uint8_t) (BQ27742_T_RISE>>8);
			write_value [12] = (uint8_t) (BQ27742_T_RISE);
			write_value [13] = (uint8_t) (BQ27742_T_TIME_CONSTANT>>8);
			write_value [14] = (uint8_t) (BQ27742_T_TIME_CONSTANT);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_R_a0()
{
	const uint8_t write_value_size=32;
	uint8_t subclass_id=88;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_CELL0_R_A_FLAG>>8);
			write_value [1] = (uint8_t) (BQ27742_CELL0_R_A_FLAG);
			write_value [2] = (uint8_t) (BQ27742_CELL0_R_A_0>>8);
			write_value [3] = (uint8_t) (BQ27742_CELL0_R_A_0);
			write_value [4] = (uint8_t) (BQ27742_CELL0_R_A_1>>8);
			write_value [5] = (uint8_t) (BQ27742_CELL0_R_A_1);
			write_value [6] = (uint8_t) (BQ27742_CELL0_R_A_2>>8);
			write_value [7] = (uint8_t) (BQ27742_CELL0_R_A_2);
			write_value [8] = (uint8_t) (BQ27742_CELL0_R_A_3>>8);
			write_value [9] = (uint8_t) (BQ27742_CELL0_R_A_3);
			write_value [10] = (uint8_t) (BQ27742_CELL0_R_A_4>>8);
			write_value [11] = (uint8_t) (BQ27742_CELL0_R_A_4);
			write_value [12] = (uint8_t) (BQ27742_CELL0_R_A_5>>8);
			write_value [13] = (uint8_t) (BQ27742_CELL0_R_A_5);
			write_value [14] = (uint8_t) (BQ27742_CELL0_R_A_6>>8);
			write_value [15] = (uint8_t) (BQ27742_CELL0_R_A_6);
			write_value [16] = (uint8_t) (BQ27742_CELL0_R_A_7>>8);
			write_value [17] = (uint8_t) (BQ27742_CELL0_R_A_7);
			write_value [18] = (uint8_t) (BQ27742_CELL0_R_A_8>>8);
			write_value [19] = (uint8_t) (BQ27742_CELL0_R_A_8);
			write_value [20] = (uint8_t) (BQ27742_CELL0_R_A_9>>8);
			write_value [21] = (uint8_t) (BQ27742_CELL0_R_A_9);
			write_value [22] = (uint8_t) (BQ27742_CELL0_R_A_10>>8);
			write_value [23] = (uint8_t) (BQ27742_CELL0_R_A_10);
			write_value [24] = (uint8_t) (BQ27742_CELL0_R_A_11>>8);
			write_value [25] = (uint8_t) (BQ27742_CELL0_R_A_11);
			write_value [26] = (uint8_t) (BQ27742_CELL0_R_A_12>>8);
			write_value [27] = (uint8_t) (BQ27742_CELL0_R_A_12);
			write_value [28] = (uint8_t) (BQ27742_CELL0_R_A_13>>8);
			write_value [29] = (uint8_t) (BQ27742_CELL0_R_A_13);
			write_value [30] = (uint8_t) (BQ27742_CELL0_R_A_14>>8);
			write_value [31] = (uint8_t) (BQ27742_CELL0_R_A_14);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_R_a0X()
{
	const uint8_t write_value_size=32;
	uint8_t subclass_id=89;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_XCELL0_R_A_FLAG>>8);
			write_value [1] = (uint8_t) (BQ27742_XCELL0_R_A_FLAG);
			write_value [2] = (uint8_t) (BQ27742_XCELL0_R_A_0>>8);
			write_value [3] = (uint8_t) (BQ27742_XCELL0_R_A_0);
			write_value [4] = (uint8_t) (BQ27742_XCELL0_R_A_1>>8);
			write_value [5] = (uint8_t) (BQ27742_XCELL0_R_A_1);
			write_value [6] = (uint8_t) (BQ27742_XCELL0_R_A_2>>8);
			write_value [7] = (uint8_t) (BQ27742_XCELL0_R_A_2);
			write_value [8] = (uint8_t) (BQ27742_XCELL0_R_A_3>>8);
			write_value [9] = (uint8_t) (BQ27742_XCELL0_R_A_3);
			write_value [10] = (uint8_t) (BQ27742_XCELL0_R_A_4>>8);
			write_value [11] = (uint8_t) (BQ27742_XCELL0_R_A_4);
			write_value [12] = (uint8_t) (BQ27742_XCELL0_R_A_5>>8);
			write_value [13] = (uint8_t) (BQ27742_XCELL0_R_A_5);
			write_value [14] = (uint8_t) (BQ27742_XCELL0_R_A_6>>8);
			write_value [15] = (uint8_t) (BQ27742_XCELL0_R_A_6);
			write_value [16] = (uint8_t) (BQ27742_XCELL0_R_A_7>>8);
			write_value [17] = (uint8_t) (BQ27742_XCELL0_R_A_7);
			write_value [18] = (uint8_t) (BQ27742_XCELL0_R_A_8>>8);
			write_value [19] = (uint8_t) (BQ27742_XCELL0_R_A_8);
			write_value [20] = (uint8_t) (BQ27742_XCELL0_R_A_9>>8);
			write_value [21] = (uint8_t) (BQ27742_XCELL0_R_A_9);
			write_value [22] = (uint8_t) (BQ27742_XCELL0_R_A_10>>8);
			write_value [23] = (uint8_t) (BQ27742_XCELL0_R_A_10);
			write_value [24] = (uint8_t) (BQ27742_XCELL0_R_A_11>>8);
			write_value [25] = (uint8_t) (BQ27742_XCELL0_R_A_11);
			write_value [26] = (uint8_t) (BQ27742_XCELL0_R_A_12>>8);
			write_value [27] = (uint8_t) (BQ27742_XCELL0_R_A_12);
			write_value [28] = (uint8_t) (BQ27742_XCELL0_R_A_13>>8);
			write_value [29] = (uint8_t) (BQ27742_XCELL0_R_A_13);
			write_value [30] = (uint8_t) (BQ27742_XCELL0_R_A_14>>8);
			write_value [31] = (uint8_t) (BQ27742_XCELL0_R_A_14);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}

void bq27742_program_flash_subclass_current()
{
	const uint8_t write_value_size=3;
	uint8_t subclass_id=107;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_FILTER);
			write_value [1] = (uint8_t) (BQ27742_DEADBAND);
			write_value [2] = (uint8_t) (BQ27742_CC_DEADBAND);

	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}
void bq27742_program_flash_subclass_codes()
{
	const uint8_t write_value_size=24;
	uint8_t subclass_id=112;
	uint8_t flash_block=0;
	uint8_t offset=0;
	uint8_t write_value [write_value_size];
			write_value [0] = (uint8_t) (BQ27742_SEALED_TO_UNSEALED>>24);
			write_value [1] = (uint8_t) (BQ27742_SEALED_TO_UNSEALED>>16);
			write_value [2] = (uint8_t) (BQ27742_SEALED_TO_UNSEALED>>8);
			write_value [3] = (uint8_t) (BQ27742_SEALED_TO_UNSEALED);
			write_value [4] = (uint8_t) (BQ27742_UNSEALED_TO_FULL>>24);
			write_value [5] = (uint8_t) (BQ27742_UNSEALED_TO_FULL>>16);
			write_value [6] = (uint8_t) (BQ27742_UNSEALED_TO_FULL>>8);
			write_value [7] = (uint8_t) (BQ27742_UNSEALED_TO_FULL);
			write_value [8] = (uint8_t) (BQ27742_AUTHEN_KEY3>>24);
			write_value [9] = (uint8_t) (BQ27742_AUTHEN_KEY3>>16);
			write_value [10] = (uint8_t) (BQ27742_AUTHEN_KEY3>>8);
			write_value [11] = (uint8_t) (BQ27742_AUTHEN_KEY3);
			write_value [12] = (uint8_t) (BQ27742_AUTHEN_KEY2>>24);
			write_value [13] = (uint8_t) (BQ27742_AUTHEN_KEY2>>16);
			write_value [14] = (uint8_t) (BQ27742_AUTHEN_KEY2>>8);
			write_value [15] = (uint8_t) (BQ27742_AUTHEN_KEY2);
			write_value [16] = (uint8_t) (BQ27742_AUTHEN_KEY1>>24);
			write_value [17] = (uint8_t) (BQ27742_AUTHEN_KEY1>>16);
			write_value [18] = (uint8_t) (BQ27742_AUTHEN_KEY1>>8);
			write_value [19] = (uint8_t) (BQ27742_AUTHEN_KEY1);
			write_value [20] = (uint8_t) (BQ27742_AUTHEN_KEY0>>24);
			write_value [21] = (uint8_t) (BQ27742_AUTHEN_KEY0>>16);
			write_value [22] = (uint8_t) (BQ27742_AUTHEN_KEY0>>8);
			write_value [23] = (uint8_t) (BQ27742_AUTHEN_KEY0);


	uint8_t reg_value [BQ27742_DATA_FLASH_BLOCK_SIZE] = {0};
	uint32_t flash_date_sum = 0;
	uint8_t checksum = 0;
	uint8_t flash_date_access = 0x00;
	uint8_t block_date_address = BQ27742_BLOCK_DATA + offset;

	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CONTROL, &flash_date_access, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_CLASS, &subclass_id, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_DATA_FLASH_BLOCK, &flash_block, 1);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, block_date_address, write_value, write_value_size);
	TWI_ReadReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA, reg_value, 32);
	WDT_RR();
	for (int i = 0; i < BQ27742_DATA_FLASH_BLOCK_SIZE; i++)
		flash_date_sum +=reg_value[i];

	checksum = 255 - (uint8_t)(flash_date_sum);
	TWI_WriteReg (TWI_BQ27742_ADDRESS, BQ27742_BLOCK_DATA_CS, &checksum, 1);
	ic_delay_ms(BQ27742_REGISTER_WRITE_DELAY);
	WDT_RR();
}

void bq27742_program_flash()
{
	SetBit(GPIO_LEDS_ON);
	ic_delay_ms(5);
	//	//--PROGRAMOWANIE BQ---------------------------------------
	bq27742_unsaled_set();
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_full_access_set();
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_program_flash_subclass_safety(); 				//ok
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_program_flash_subclass_charge(); 				//ok
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_program_flash_subclass_charge_termination(); 	//ok
#ifdef 	BQ_PROGRAMM_DFEFAULT
	bq27742_program_flash_subclass_JEITA(); 				//ok
#endif
	bq27742_program_flash_subclass_data(); 					//ok
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_program_flash_subclass_discharge(); 			//ok
#ifdef 	BQ_PROGRAMM_DFEFAULT
	bq27742_program_flash_subclass_manufacturer_data(); 	//ok
#endif
	bq27742_program_flash_subclass_integrity_data(); 		//ok
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_program_flash_subclass_lifetime_data();			//ok
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_program_flash_subclass_lifetime_temp_samples();	//ok
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_program_flash_subclass_registers();				// OK
	RGB_right_set(COLOR_YELLOW, 10);
#ifdef 	BQ_PROGRAMM_DFEFAULT
	bq27742_program_flash_subclass_lifetime_resolution();	//ok
	bq27742_program_flash_subclass_power(); 				//OK
	bq27742_program_flash_subclass_manufacturer_info1();	//ok
	bq27742_program_flash_subclass_manufacturer_info2();	//ok
	bq27742_program_flash_subclass_if_cfg1();				//ok, ale bardzo długie
	bq27742_program_flash_subclass_current_thresholds(); 	//ok
#endif
	bq27742_program_flash_subclass_state(); 				//ok
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_data_flash_write(83,0,0,BQ27742_CHEM_ID_ ,2); 	//ok
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_program_flash_subclass_R_a0(); 					//ok
	RGB_right_set(COLOR_CYAN, 10);
	bq27742_program_flash_subclass_R_a0X(); 				//ok
	RGB_right_set(COLOR_YELLOW, 10);
	bq27742_program_flash_subclass_data_104();				//ok
	RGB_right_set(COLOR_CYAN, 10);
#ifdef 	BQ_PROGRAMM_DFEFAULT
	bq27742_program_flash_subclass_current(); 				//ok
	bq27742_program_flash_subclass_codes();
#endif
	bq27742_sealed_set();
	RGB_right_set(COLOR_BLACK, 10);
	RGB_left_set(COLOR_BLACK, 10);
}


