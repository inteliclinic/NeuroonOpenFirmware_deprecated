/**
 *  @file   ic_ltc_devices_cli_procedures.c
 *  @Author Wojciech WÄ™clewski <w.weclewski@inteliclinic.com>
 *  @date   November, 2016
 *  @brief  Contains CLI procedures for LTC devices handlers and drivers testing.
 *
 *  For additional information about CLI, look into ic_cli module.
 */

#include "ic_ltc_devices_cli_procedures.h"
#include "ic_device_handle_api.h"
#include "ic_timers.h"
#include <stdlib.h>
#include <string.h>
#include "ic_cli.h"
#include "ic_low_level_control.h"
#include "ic_cmd_emiter.h"
#include "ic_cc.h"

void cli_rgb_led_set_func(int c, int *args) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  rgb_led_set_func(array, &len, (e_rgbLedSide)args[0], (e_funcType)args[1], (e_rgbLedColor)args[2], (uint8_t)args[3], (uint16_t)args[4], (uint16_t)args[5], (uint16_t)args[6]);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

void cli_vibra_set_func(int c, int *args) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
<<<<<<< HEAD
  vibrator_set_func(array, &len, (e_funcType)args[0], (uint8_t)args[1], (uint32_t)args[3], (uint32_t)args[2], (uint16_t)args[4]);
||||||| merged common ancestors
  vibrator_set_func(array, &len, (uint8_t)args[1], (e_funcType)args[0], (uint32_t)args[3], (uint32_t)args[2], (uint16_t)args[4]);
=======
  vibrator_set_func(array, &len, (e_funcType)args[0], (uint8_t)args[1] ,(uint32_t)args[3], (uint32_t)args[2], (uint16_t)args[4]);
>>>>>>> neuroonZombie/feature/status_frame
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

void cli_pwr_led_set_func(int c, int *args) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  pwr_led_set_func(array, &len, (e_funcType)args[0], 0, (uint32_t)args[2], (uint32_t)args[1], (uint16_t)args[3]);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_rgb_both_sin_white_max_2s(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_SIN_WAVE, RGB_LED_COLOR_WHITE, 63, 0, 2000, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_rgb_both_on_white_half_1500(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_ON, RGB_LED_COLOR_WHITE, 30, 1500, 700, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_toggle_pwr_led(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  static uint8_t selector = 0;
  if (selector%2 == 1) {
    pwr_led_set_func(array, &len, FUN_TYPE_ON, 63, 0, 500, 0);
  } else {
    pwr_led_set_func(array, &len, FUN_TYPE_ON, 63, 0, 200, 0);
  }
  selector++;
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_toggle_rgb(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  static uint8_t selector = 0;
  if (selector%8 == 1) {
    rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_ON, RGB_LED_COLOR_RED, 63, 0, 2000, 0);
  } else if (selector%8 == 3) {
    rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_ON, RGB_LED_COLOR_GREEN, 63, 1000, 1000, 0);
  } else if (selector%8 == 5) {
    rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_ON, RGB_LED_COLOR_BLUE, 63, 2000, 500, 0);
  } else if (selector%8 == 7) {
    rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_ON, RGB_LED_COLOR_WHITE, 63, 3000, 3000, 0);
  } else {
    rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_OFF, RGB_LED_COLOR_TEAL, 30, 0, 0, 0);
  }
  selector++;
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_toggle_vib(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  static uint8_t selector = 0;
  if (selector%2 == 1) {
    vibrator_set_func(array, &len, FUN_TYPE_ON, 63, 0, 500, 0);
  } else {
    vibrator_set_func(array, &len, FUN_TYPE_OFF, 63, 0, 500, 0);
  }
  selector++;
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_stop_rgb(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  rgb_led_set_func(array, &len, RGB_LED_SIDE_BOTH, FUN_TYPE_OFF, RGB_LED_COLOR_WHITE, 30, 0, 1000, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_stop_pwr_led(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  pwr_led_set_func(array, &len, FUN_TYPE_OFF, 0, 0, 1000, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_stop_vib(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  vibrator_set_func(array, &len, FUN_TYPE_OFF, 50, 0, 100, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_vib_tri_max_1500(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  vibrator_set_func(array, &len, FUN_TYPE_TRIANGLE, 63, 0, 1500, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_vib_on_max_1s(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  vibrator_set_func(array, &len, FUN_TYPE_ON, 63, 1000, 2500, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_vib_sq_max_500(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  vibrator_set_func(array, &len, FUN_TYPE_SQUARE, 63, 0, 500, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_pwr_led_on_500(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  pwr_led_set_func(array, &len, FUN_TYPE_ON, 0, 0, 500, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_pwr_led_on_1000(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  pwr_led_set_func(array, &len, FUN_TYPE_ON, 0, 0, 1000, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

static void scd_pwr_led_on_500_1s(void) {
  char array[20];
  memset(array, 0, sizeof(array));
  size_t len = 20;
  pwr_led_set_func(array, &len, FUN_TYPE_ON, 0, 1000, 500, 0);
  push_data_CMD0Frame((uint8_t*)array, (uint16_t)len);
}

#define PWR_TOGGLE_TEST_TIME 0
#define STOP_1_TIME PWR_TOGGLE_TEST_TIME + 7000
#define RGB_TOGGLE_TEST_TIME STOP_1_TIME + 2000
#define STOP_2_TIME RGB_TOGGLE_TEST_TIME + 7000
#define VIB_TOGGLE_TEST_TIME STOP_2_TIME + 2000
#define STOP_3_TIME VIB_TOGGLE_TEST_TIME + 7000
#define TWO_DEVICES_TOGGLE_TEST_TIME STOP_3_TIME + 2000
#define STOP_4_TIME TWO_DEVICES_TOGGLE_TEST_TIME + 7000
#define ALL_DEVICES_SEND_1_TEST_TIME STOP_4_TIME + 2000
#define ALL_DEVICES_SEND_2_TEST_TIME ALL_DEVICES_SEND_1_TEST_TIME + 2000
#define ALL_DEVICES_SEND_3_TEST_TIME ALL_DEVICES_SEND_2_TEST_TIME + 2000
#define ALL_DEVICES_SEND_4_TEST_TIME ALL_DEVICES_SEND_3_TEST_TIME + 2000
#define ALL_DEVICES_SEND_5_TEST_TIME ALL_DEVICES_SEND_4_TEST_TIME + 2000
#define ALL_DEVICES_SEND_6_TEST_TIME ALL_DEVICES_SEND_5_TEST_TIME + 2000
#define STOP_5_TIME ALL_DEVICES_SEND_6_TEST_TIME + 2000
#define TEST_END_TIME STOP_5_TIME + 2000

#define STEP_DELAY 100

uint32_t demo_start_timer;
uint8_t state_selector;
bool signal_collision_demo_start = false;
uint8_t state_counter;

typedef enum {
  IDLE,
  STOP_1,
  STOP_2,
  STOP_3,
  TEST_END,
  PWR_TOGGLE,
  PWR_TOGGLE_IDLE,
  RGB_TOGGLE,
  RGB_TOGGLE_IDLE,
  VIB_TOGGLE,
  VIB_TOGGLE_IDLE,
  TWO_DEVICES_TOGGLE_1,
  TWO_DEVICES_TOGGLE_2,
  TWO_DEVICES_TOGGLE_IDLE,
  ALL_DEVICES_SEND_1_1,
  ALL_DEVICES_SEND_1_2,
  ALL_DEVICES_SEND_1_3,
  ALL_DEVICES_SEND_2_1,
  ALL_DEVICES_SEND_2_2,
  ALL_DEVICES_SEND_2_3,
  ALL_DEVICES_SEND_3_1,
  ALL_DEVICES_SEND_3_2,
  ALL_DEVICES_SEND_3_3
}states;

void cli_signal_collision_demo_func(int c, int *args) {
  print_cli("TEST_START\n\r");
  demo_start_timer = timer_get_ms_counter();
  signal_collision_demo_start = true;
  state_selector = PWR_TOGGLE;
  state_counter = 0;
}

static void cli_signal_collision_demo_state_selector(uint32_t timer) {
  if ((timer >= demo_start_timer + STOP_1_TIME) && (state_counter == 0)) {
    state_selector = STOP_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + RGB_TOGGLE_TEST_TIME) && (state_counter == 1)) {
    state_selector = RGB_TOGGLE;
    state_counter++;
  } else if ((timer >= demo_start_timer + STOP_2_TIME) && (state_counter == 2)) {
    state_selector = STOP_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + VIB_TOGGLE_TEST_TIME) && (state_counter == 3)) {
    state_selector = VIB_TOGGLE;
    state_counter++;
  } else if ((timer >= demo_start_timer + STOP_3_TIME) && (state_counter == 4)) {
    state_selector = STOP_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + TWO_DEVICES_TOGGLE_TEST_TIME) && (state_counter == 5)) {
    state_selector = TWO_DEVICES_TOGGLE_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + STOP_4_TIME) && (state_counter == 6)) {
    state_selector = STOP_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_1_TEST_TIME) && (state_counter == 7)) {
    state_selector = ALL_DEVICES_SEND_1_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_2_TEST_TIME) && (state_counter == 8)) {
    state_selector = ALL_DEVICES_SEND_2_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_3_TEST_TIME) && (state_counter == 9)) {
    state_selector = ALL_DEVICES_SEND_3_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_4_TEST_TIME) && (state_counter == 10)) {
    state_selector = ALL_DEVICES_SEND_1_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_5_TEST_TIME) && (state_counter == 11)) {
    state_selector = ALL_DEVICES_SEND_2_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + ALL_DEVICES_SEND_6_TEST_TIME) && (state_counter == 12)) {
    state_selector = ALL_DEVICES_SEND_3_1;
    state_counter++;
  } else if ((timer >= demo_start_timer + STOP_5_TIME) && (state_counter == 13)) {
    state_selector = STOP_1;
    state_counter++;
  } else if (timer >= demo_start_timer + TEST_END_TIME) {
    state_selector = TEST_END;
  }
}

static void cli_signal_collision_demo_state_machine(uint32_t timer) {
  static uint32_t step_timer = 0;

  if (timer >= step_timer + STEP_DELAY) {
    /*scd_stop_pwr_led();*/
    /*scd_stop_rgb();*/
    /*scd_stop_vib();*/
    step_timer = timer;
    switch(state_selector) {
      case IDLE:
        break;
      case STOP_1:
        print_cli("STOP STATE\n\r");
        scd_stop_rgb();
        state_selector = STOP_2;
        break;
      case STOP_2:
        scd_stop_vib();
        state_selector = STOP_3;
        break;
      case STOP_3:
        scd_stop_pwr_led();
        state_selector = IDLE;
        break;
      case PWR_TOGGLE:
        print_cli("PWR_TOGGLE STATE\n\r");
        scd_rgb_both_sin_white_max_2s();
        state_selector = PWR_TOGGLE_IDLE;
        break;
      case PWR_TOGGLE_IDLE:
        scd_toggle_pwr_led();
        break;
      case RGB_TOGGLE:
        print_cli("RGB_TOGGLE STATE\n\r");
        scd_vib_tri_max_1500();
        state_selector = RGB_TOGGLE_IDLE;
        break;
      case RGB_TOGGLE_IDLE:
        scd_toggle_rgb();
        break;
      case VIB_TOGGLE:
        print_cli("VIB_TOGGLE STATE\n\r");
        scd_pwr_led_on_500();
        state_selector = VIB_TOGGLE_IDLE;
        break;
      case VIB_TOGGLE_IDLE:
        scd_toggle_vib();
        break;
      case TWO_DEVICES_TOGGLE_1:
        print_cli("TWO_DEVICES_TOGGLE_1 STATE\n\r");
        scd_rgb_both_sin_white_max_2s();
        state_selector = TWO_DEVICES_TOGGLE_2;
        break;
      case TWO_DEVICES_TOGGLE_2:
        print_cli("TWO_DEVICES_TOGGLE_2 STATE\n\r");
        scd_vib_tri_max_1500();
        state_selector = TWO_DEVICES_TOGGLE_IDLE;
        break;
      case TWO_DEVICES_TOGGLE_IDLE:
        scd_toggle_pwr_led();
        break;
      case ALL_DEVICES_SEND_1_1:
        print_cli("ALL_DEVICES_SEND_1 STATE\n\r");
        scd_rgb_both_on_white_half_1500();
        state_selector = ALL_DEVICES_SEND_1_2;
        break;
      case ALL_DEVICES_SEND_1_2:
        scd_vib_on_max_1s();
        state_selector = ALL_DEVICES_SEND_1_3;
        break;
      case ALL_DEVICES_SEND_1_3:
        scd_pwr_led_on_500_1s();
        state_selector = IDLE;
        break;
      case ALL_DEVICES_SEND_2_1:
        print_cli("ALL_DEVICES_SEND_2 STATE\n\r");
        scd_rgb_both_on_white_half_1500();
        state_selector = ALL_DEVICES_SEND_2_2;
        break;
      case ALL_DEVICES_SEND_2_2:
        scd_vib_sq_max_500();
        state_selector = ALL_DEVICES_SEND_2_3;
        break;
      case ALL_DEVICES_SEND_2_3:
        scd_pwr_led_on_500();
        state_selector = IDLE;
        break;
      case ALL_DEVICES_SEND_3_1:
        print_cli("ALL_DEVICES_SEND_3 STATE\n\r");
        scd_rgb_both_on_white_half_1500();
        state_selector = ALL_DEVICES_SEND_3_2;
        break;
      case ALL_DEVICES_SEND_3_2:
        scd_vib_tri_max_1500();
        state_selector = ALL_DEVICES_SEND_3_3;
        break;
      case ALL_DEVICES_SEND_3_3:
        scd_pwr_led_on_1000();
        state_selector = IDLE;
        break;
      case TEST_END:
        print_cli("TEST_END\n\r");
        signal_collision_demo_start = false;
      default:
        break;
    }
  }
}

void cli_signal_collision_demo_update(void) {
  if (signal_collision_demo_start) {
    cli_signal_collision_demo_state_selector(timer_get_ms_counter());
    cli_signal_collision_demo_state_machine(timer_get_ms_counter());
  }
}
